import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;



/*
 *  Author : Abhijit Shanbhag 
 *  Class: CnfExp
 *  This class maintains the CNF expression
 */


public class CnfExp {
	public  int numOfClauses;
	public  int numOfVariables; 
	
	private int[][] CNFRef;
	
	
	CnfExp()
	{

	}
	
	public void initCNFRef()
	{
		this.CNFRef=new int [this.numOfClauses][4];
		// Rows -> Number of clauses
		// Columns -> First 3 for variables and 4th for result of the form (1 - true , 0 - false , -1 
		// not defined
		//Initialize result as false

	}
	
	public void setCnfRef(int[][] clauseExp)
	{
		
		this.CNFRef = clauseExp;
	}
	
	public int[] evaluateCNFClauses(int variableValueSet[])
	{
		int variables = -1;
		int result = -1;
		int[] CNFResult = new int[this.numOfClauses];
		
		for (int i=0;i<this.numOfClauses;i++)
		{
			for(int j=0;j<3;j++)
			{
				variables =this.CNFRef[i][j];
				
				if(variables == 0) //Variable is undef means no more i/p variable
				 break;
				
				if(variables > 0) // means non-not variable -> x
				{
					result = variableValueSet[variables-1];
				}
				else // means not variable ~x
				{
					result = (-1)*(variableValueSet[(-1*variables)-1]); // Storing not of the i/p value
				}
				
				if(result == 1) // Atleast one variable is true then the whole clause is true
				{
					CNFResult[i] = 1;
				}
			}

		}
		
		return CNFResult;
		
	}
	
	public void printCNFref()
	{
		System.out.println("CNF matrix");
		for(int i=0;i< this.numOfClauses;i++)
		{
			for(int j=0;j <3;j++)
			{
				System.out.print(this.CNFRef[i][j]+" ");
				
			}
			System.out.println();
		}
	}
	
	public void printCNFResult(int CNFResult[])
	{
		System.out.println();
		System.out.println("CNF result");
		for(int i =0 ;i < this.numOfClauses;i++)
		{
			System.out.print(CNFResult[i]+" ");
		}
		System.out.println();
	}
	
	public void printVariableValueSet(int variableValueSet[])
	{
		System.out.println();
		System.out.println("Variable Value Set result");
		for(int i =0 ;i < this.numOfVariables;i++)
		{
			System.out.print(variableValueSet[i]+" ");
		}
	}
	
	public int evaluationFunction(int[] CNFResult)
	{
		//Evaluation function f(n) is generated by adding the true evaluated clauses
		int count=0;
		for(int i=0;i<this.numOfClauses;i++)
		{
			count+=CNFResult[i];
		}
		return count;
	}
	
	public int[][] readFile(String fileName)throws IOException
	{
		
		BufferedReader br = new BufferedReader(new FileReader(fileName));
		
		Scanner s = new Scanner(br);
		
		String token = s.next();
		//Skip comments
		while(token.equals("c")){
			s.nextLine();
			token=s.next();
		}
		
		//Parse preamble, ensure 
		if(token.equals("p")){
			token = s.next();
		}
		
		if(!token.equals("cnf")){
			System.out.println("Input Format is not CNF");
			
		}
		
		this.numOfVariables = s.nextInt();
		this.numOfClauses = s.nextInt();
		
		System.out.print("V:"+this.numOfVariables+" C:"+this.numOfClauses );
		
		
		int[][] clauseExp = new int[this.numOfClauses][3];
		
		//System.out.println("Readfile");
		
		for(int clauseIter=0;clauseIter < this.numOfClauses;clauseIter++)
		{
			int varCount = 0;
			int x = s.nextInt();
			
			//System.out.println();
			
			while( x != 0)
			{
				clauseExp[clauseIter][varCount] = x;
				//System.out.print(clauseExp[clauseIter][varCount] + " ");
				varCount++;
				x = s.nextInt();
			}
		}
		s.close();
		br.close();
		return clauseExp;
		
	}
	

	
	public int[][] prepareVariableValueSet()
	{
		int[][] variableValueSet = new int[10][this.numOfVariables];
		
		for(int i=0;i<10;i++)
		{
			for (int j =0;j<this.numOfVariables;j++)
			{
				variableValueSet[i][j] = Utility.randomBoolGenerator();
			}
		}

		
		return variableValueSet;
	}
	
	public static void main(String args[]) throws IOException {
		CnfExp c = new CnfExp();
		//c.printCNFref();
		
		String fileName= System.getProperty("user.dir")+"/"+"ip.cnf";
		
		int[][] clauseExp = c.readFile(fileName);
		
		c.initCNFRef();
		c.setCnfRef(clauseExp);
		
		//c.printCNFref();
		
		int[] variableValueSet = new int[c.numOfVariables];//c.prepareVariableValueSet();
		c.printVariableValueSet(variableValueSet);
		
		int[] CNFResult= c.evaluateCNFClauses(variableValueSet);
		
		c.printCNFResult(CNFResult);
		
		System.out.println("Evaluation function is " +c.evaluationFunction(CNFResult)+" out of "+c.numOfClauses);
	
	}
	
	
}